# Access the id_github file from Secret Manager, and setup SSH
substitutions:
  _GCP_PROJECT_ID_1: $PROJECT_ID # default value
  _BUCKET_NAME_2: thgc112
  _BUCKET_PREFIX_3: tfg
  _BIGQUERY_DATASET_ID_4: test_dataset_1
  _DESTROY_INFRA_AFTER_CREATE: 'false'

timeout: 3000s
steps:
- name: 'gcr.io/cloud-builders/git'
  secretEnv: ['SSH_KEY']
  entrypoint: 'bash'
  args:
  - -c
  - |
    echo "$$SSH_KEY" >> /root/.ssh/id_rsa
    chmod 400 /root/.ssh/id_rsa
    cp known_hosts.github /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- name: gcr.io/cloud-builders/git
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    git remote -v
    git remote set-url origin git@github.com:MACHANDRA11/cloudbuild_0_repo.git
    git config --global user.name "MACHANDRA11"
    git config --global user.email "chandrakanth.maddana@mediaagility.com"
    git config --list
    if [ -d tf_copy ]; then
        rm -r tf_copy 
    fi
    cp -r tf_template_file tf_copy
    if []
    ls 
    cd tf_copy  
    sed -i "s/gcp_project_id/$_GCP_PROJECT_ID_1/g" terraform.tfvars
    sed -i "s/gcp_bucket_names/$_BUCKET_NAME_2/g" terraform.tfvars
    sed -i "s/gcp_bucket_prefix/$_BUCKET_PREFIX_3/g" terraform.tfvars
    sed -i "s/gcp_dataset_id/$_BIGQUERY_DATASET_ID_4/g" terraform.tfvars
    ls
    cat main.tf
    cat terraform.tfvars
    echo "Pushing changes to git config repo ..."
    ls
    # rm -r ../tf_template_file
    ls /root/
    git add -A
    git commit -m "Updated with build ${BUILD_ID} from ${REPO_NAME} commit ${COMMIT_SHA}"
    git push origin master
    
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- id: 'tf plan and apply'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      cd tf_copy
      echo "branch $BRANCH_NAME"
      echo "run init"
      terraform init
      echo "run validate"
      terraform validate 
      echo "run plan"
      terraform plan -out terraform.plan
      terraform apply -auto-approve terraform.plan
  volumes:
  - name: 'ssh'
    path: /root/.ssh

- id: 'Destroy Infra'
  name: 'hashicorp/terraform:1.0.0'
  entrypoint: 'sh'
  args: 
    - '-c'
    - |
      if [ "${_DESTROY_INFRA_AFTER_CREATE}" = "true" ];then
        cd tf_copy
        terraform destroy -auto-approve
      fi

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/git-secret-key/versions/latest
    env: 'SSH_KEY'

# substitutions:
#   _NAME_1: $PROJECT_ID # default value
#   _NAME_2: thga112
#   _NAME_3: tfg
#   _NAME_4: ''




# Access the id_github file from Secret Manager, and setup SSH
# steps:
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args: ['a.sh']
#   env:
#     - 'Name=chandra'
  # substitutions:
  #   _NAME: v6.9.1 # default value
# steps:
# - name: ubuntu
#   entrypoint: bash
#   args:
#   - -c
#   - |
#     chmod +x a.sh &&
#     sh a.sh
#   env:
#     - 'Name=${_NAME}'
  # substitutions:
  #   _NAME: v6.9.1 # default value

# steps:
# - name: ubuntu
#   entrypoint: bash
#   args: 
#    - -c 
#    - |
#      # Installing zip executable
#      apt install zip &&
#      zip -r myfiles.zip package/utils &&
#      ls -l /workspace/*

# # Access the id_github file from Secret Manager, and setup SSH
# steps:
# - name: 'gcr.io/cloud-builders/git'
#   secretEnv: ['SSH_KEY']
#   entrypoint: 'bash'
#   args:
#   - -c
#   - |
#     echo "$$SSH_KEY" >> /root/.ssh/id_rsa
#     chmod 400 /root/.ssh/id_rsa
#     cp known_hosts.github /root/.ssh/known_hosts
#   volumes:
#   - name: 'ssh'
#     path: /root/.ssh

# # Clone the repository
# - name: 'gcr.io/cloud-builders/git'
#   args:
#   - clone
#   - --recurse-submodules
#   - git@github.com:GIT_USERNAME/GIT_REPOSITORY
#   volumes:
#   - name: 'ssh'
#     path: /root/.ssh
  
# - name: gcr.io/cloud-builders/git
#   entrypoint: 'bash'
#   args:
#   - '-c'
#   - |
#     echo "Cloning repo ..."
#     git clone --depth 1 git@github.com:mikesparr/gcp-cicd-demo-config
#     echo "Updating image tag version ..."
#     cd gcp-cicd-demo-config
#     ls
#     sed -i "s|newTag: .*|newTag: $SHORT_SHA|" demo-app/overlays/develop/kustomization.yaml
#     echo "Pushing changes to git config repo ..."
#     git config --global user.name mikesparr
#     git config --global user.email msparr@gmail.com
#     git add -A
#     git commit -m "Updated with build ${BUILD_ID} from ${REPO_NAME} commit ${COMMIT_SHA}"
#     git push origin master
#   volumes:
#   - name: 'ssh'
#     path: /root/.ssh
# # for substitution
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build',
#          '--build-arg',
#          'node_version=${_NODE_VERSION_2}',
#          '-t',
#          'gcr.io/$PROJECT_ID/build-substitutions-nodejs-${_NODE_VERSION_2}',
#          '.']
# substitutions:
#     _NODE_VERSION_1: v6.9.1 # default value
#     _NODE_VERSION_2: v6.9.2 # default value

# availableSecrets:
#   secretManager:
#   - versionName: projects/PROJECT_ID/secrets/secret-name/versions/latest
#     env: 'SSH_KEY'








# # cat abc.txt | xargs printStrings.sh
# export TF_VAR_region=us-west-1

    # cat terraform.tfvars | sed -e "s/gcp_project_id/$_NAME_1/g" >terraform1.tfvars | mv terraform1.tfvars terraform.tfvars
    # ls
    # cat terraform.tfvars | sed -e "s/gcp_bucket_names/$_NAME_2/g" >terraform1.tfvars | mv terraform1.tfvars terraform.tfvars
    # cat terraform.tfvars | sed -e "s/gcp_bucket_prefix/$_NAME_3/g" >terraform1.tfvars | mv terraform1.tfvars terraform.tfvars
    # if [ ${_NAME_4} ];
    # then
    #     cat terraform.tfvars | sed -e "s/gcp_service_api/$_NAME_4/g" >terraform1.tfvars | mv terraform1.tfvars terraform.tfvars
    # fi  